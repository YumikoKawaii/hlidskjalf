// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interactions/service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Interaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Interaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PostId

	// no validation rules for Author

	// no validation rules for Type

	// no validation rules for Content

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// InteractionValidationError is the validation error returned by
// Interaction.Validate if the designated constraints aren't met.
type InteractionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractionValidationError) ErrorName() string { return "InteractionValidationError" }

// Error satisfies the builtin error interface
func (e InteractionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteraction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractionValidationError{}

// Validate checks the field values on UpsertInteractionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInteractionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertInteractionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PostId

	// no validation rules for Author

	// no validation rules for Type

	// no validation rules for Content

	return nil
}

// UpsertInteractionRequestValidationError is the validation error returned by
// UpsertInteractionRequest.Validate if the designated constraints aren't met.
type UpsertInteractionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInteractionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInteractionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInteractionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInteractionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInteractionRequestValidationError) ErrorName() string {
	return "UpsertInteractionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInteractionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInteractionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInteractionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInteractionRequestValidationError{}

// Validate checks the field values on UpsertInteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertInteractionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for InteractionId

	return nil
}

// UpsertInteractionResponseValidationError is the validation error returned by
// UpsertInteractionResponse.Validate if the designated constraints aren't met.
type UpsertInteractionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertInteractionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertInteractionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertInteractionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertInteractionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertInteractionResponseValidationError) ErrorName() string {
	return "UpsertInteractionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertInteractionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertInteractionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertInteractionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertInteractionResponseValidationError{}

// Validate checks the field values on GetInteractionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInteractionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPostId() < 1 {
		return GetInteractionsRequestValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for SortOrder

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// GetInteractionsRequestValidationError is the validation error returned by
// GetInteractionsRequest.Validate if the designated constraints aren't met.
type GetInteractionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractionsRequestValidationError) ErrorName() string {
	return "GetInteractionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractionsRequestValidationError{}

// Validate checks the field values on GetInteractionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInteractionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInteractionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetInteractionResponseValidationError is the validation error returned by
// GetInteractionResponse.Validate if the designated constraints aren't met.
type GetInteractionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractionResponseValidationError) ErrorName() string {
	return "GetInteractionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractionResponseValidationError{}

// Validate checks the field values on GetInteractionResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInteractionResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInteractions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInteractionResponse_DataValidationError{
					field:  fmt.Sprintf("Interactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// GetInteractionResponse_DataValidationError is the validation error returned
// by GetInteractionResponse_Data.Validate if the designated constraints
// aren't met.
type GetInteractionResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInteractionResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInteractionResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInteractionResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInteractionResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInteractionResponse_DataValidationError) ErrorName() string {
	return "GetInteractionResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetInteractionResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInteractionResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInteractionResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInteractionResponse_DataValidationError{}
