// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionServiceClient interface {
	UpsertInteraction(ctx context.Context, in *UpsertInteractionRequest, opts ...grpc.CallOption) (*UpsertInteractionResponse, error)
	GetInteractions(ctx context.Context, in *GetInteractionsRequest, opts ...grpc.CallOption) (*GetInteractionResponse, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) UpsertInteraction(ctx context.Context, in *UpsertInteractionRequest, opts ...grpc.CallOption) (*UpsertInteractionResponse, error) {
	out := new(UpsertInteractionResponse)
	err := c.cc.Invoke(ctx, "/interaction.api.InteractionService/UpsertInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetInteractions(ctx context.Context, in *GetInteractionsRequest, opts ...grpc.CallOption) (*GetInteractionResponse, error) {
	out := new(GetInteractionResponse)
	err := c.cc.Invoke(ctx, "/interaction.api.InteractionService/GetInteractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility
type InteractionServiceServer interface {
	UpsertInteraction(context.Context, *UpsertInteractionRequest) (*UpsertInteractionResponse, error)
	GetInteractions(context.Context, *GetInteractionsRequest) (*GetInteractionResponse, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInteractionServiceServer struct {
}

func (UnimplementedInteractionServiceServer) UpsertInteraction(context.Context, *UpsertInteractionRequest) (*UpsertInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) GetInteractions(context.Context, *GetInteractionsRequest) (*GetInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInteractions not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	s.RegisterService(&_InteractionService_serviceDesc, srv)
}

func _InteractionService_UpsertInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).UpsertInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interaction.api.InteractionService/UpsertInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).UpsertInteraction(ctx, req.(*UpsertInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interaction.api.InteractionService/GetInteractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetInteractions(ctx, req.(*GetInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InteractionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.api.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertInteraction",
			Handler:    _InteractionService_UpsertInteraction_Handler,
		},
		{
			MethodName: "GetInteractions",
			Handler:    _InteractionService_GetInteractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interactions/service.proto",
}
