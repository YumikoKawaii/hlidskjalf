// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserverClient interface {
	Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	ViewStream(ctx context.Context, in *ViewStreamRequest, opts ...grpc.CallOption) (Observer_ViewStreamClient, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, "/observer.api.Observer/Entry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *observerClient) ViewStream(ctx context.Context, in *ViewStreamRequest, opts ...grpc.CallOption) (Observer_ViewStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Observer_serviceDesc.Streams[0], "/observer.api.Observer/ViewStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &observerViewStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Observer_ViewStreamClient interface {
	Recv() (*ViewStreamResponse, error)
	grpc.ClientStream
}

type observerViewStreamClient struct {
	grpc.ClientStream
}

func (x *observerViewStreamClient) Recv() (*ViewStreamResponse, error) {
	m := new(ViewStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObserverServer is the server API for Observer service.
// All implementations must embed UnimplementedObserverServer
// for forward compatibility
type ObserverServer interface {
	Entry(context.Context, *EntryRequest) (*EntryResponse, error)
	ViewStream(*ViewStreamRequest, Observer_ViewStreamServer) error
	mustEmbedUnimplementedObserverServer()
}

// UnimplementedObserverServer must be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (UnimplementedObserverServer) Entry(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entry not implemented")
}
func (UnimplementedObserverServer) ViewStream(*ViewStreamRequest, Observer_ViewStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewStream not implemented")
}
func (UnimplementedObserverServer) mustEmbedUnimplementedObserverServer() {}

// UnsafeObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserverServer will
// result in compilation errors.
type UnsafeObserverServer interface {
	mustEmbedUnimplementedObserverServer()
}

func RegisterObserverServer(s grpc.ServiceRegistrar, srv ObserverServer) {
	s.RegisterService(&_Observer_serviceDesc, srv)
}

func _Observer_Entry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).Entry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/observer.api.Observer/Entry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).Entry(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Observer_ViewStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ViewStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObserverServer).ViewStream(m, &observerViewStreamServer{stream})
}

type Observer_ViewStreamServer interface {
	Send(*ViewStreamResponse) error
	grpc.ServerStream
}

type observerViewStreamServer struct {
	grpc.ServerStream
}

func (x *observerViewStreamServer) Send(m *ViewStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Observer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "observer.api.Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Entry",
			Handler:    _Observer_Entry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ViewStream",
			Handler:       _Observer_ViewStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "observer/service.proto",
}
