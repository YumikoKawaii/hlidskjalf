// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: center/service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Author) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Alias

	// no validation rules for Avatar

	return nil
}

// AuthorValidationError is the validation error returned by Author.Validate if
// the designated constraints aren't met.
type AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorValidationError) ErrorName() string { return "AuthorValidationError" }

// Error satisfies the builtin error interface
func (e AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorValidationError{}

// Validate checks the field values on Interaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Interaction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InteractionValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Content

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	return nil
}

// InteractionValidationError is the validation error returned by
// Interaction.Validate if the designated constraints aren't met.
type InteractionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InteractionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InteractionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InteractionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InteractionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InteractionValidationError) ErrorName() string { return "InteractionValidationError" }

// Error satisfies the builtin error interface
func (e InteractionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteraction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InteractionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InteractionValidationError{}

// Validate checks the field values on PostDetail with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PostDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostDetailValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetInteractions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostDetailValidationError{
					field:  fmt.Sprintf("Interactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PostDetailValidationError is the validation error returned by
// PostDetail.Validate if the designated constraints aren't met.
type PostDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDetailValidationError) ErrorName() string { return "PostDetailValidationError" }

// Error satisfies the builtin error interface
func (e PostDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDetailValidationError{}

// Validate checks the field values on GetPostsDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPostsDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PostId

	return nil
}

// GetPostsDetailRequestValidationError is the validation error returned by
// GetPostsDetailRequest.Validate if the designated constraints aren't met.
type GetPostsDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostsDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostsDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostsDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostsDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostsDetailRequestValidationError) ErrorName() string {
	return "GetPostsDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostsDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostsDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostsDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostsDetailRequestValidationError{}

// Validate checks the field values on GetPostsDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPostsDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostsDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPostsDetailResponseValidationError is the validation error returned by
// GetPostsDetailResponse.Validate if the designated constraints aren't met.
type GetPostsDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostsDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostsDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostsDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostsDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostsDetailResponseValidationError) ErrorName() string {
	return "GetPostsDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostsDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostsDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostsDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostsDetailResponseValidationError{}

// Validate checks the field values on UpsertPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpsertPostRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertPostRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		return UpsertPostRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpsertPostRequestValidationError is the validation error returned by
// UpsertPostRequest.Validate if the designated constraints aren't met.
type UpsertPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPostRequestValidationError) ErrorName() string {
	return "UpsertPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPostRequestValidationError{}

// Validate checks the field values on UpsertPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertPostResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	return nil
}

// UpsertPostResponseValidationError is the validation error returned by
// UpsertPostResponse.Validate if the designated constraints aren't met.
type UpsertPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPostResponseValidationError) ErrorName() string {
	return "UpsertPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPostResponseValidationError{}

// Validate checks the field values on DiscoveryPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoveryPostsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Author

	// no validation rules for SortOrder

	if m.GetPage() < 1 {
		return DiscoveryPostsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() < 10 {
		return DiscoveryPostsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
	}

	return nil
}

// DiscoveryPostsRequestValidationError is the validation error returned by
// DiscoveryPostsRequest.Validate if the designated constraints aren't met.
type DiscoveryPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPostsRequestValidationError) ErrorName() string {
	return "DiscoveryPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPostsRequestValidationError{}

// Validate checks the field values on DiscoveryPostsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoveryPostsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscoveryPostsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DiscoveryPostsResponseValidationError is the validation error returned by
// DiscoveryPostsResponse.Validate if the designated constraints aren't met.
type DiscoveryPostsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPostsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPostsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPostsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPostsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPostsResponseValidationError) ErrorName() string {
	return "DiscoveryPostsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPostsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPostsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPostsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPostsResponseValidationError{}

// Validate checks the field values on GetPostsDetailResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPostsDetailResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPostsDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostsDetailResponse_DataValidationError{
				field:  "PostsDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPostsDetailResponse_DataValidationError is the validation error returned
// by GetPostsDetailResponse_Data.Validate if the designated constraints
// aren't met.
type GetPostsDetailResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostsDetailResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostsDetailResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostsDetailResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostsDetailResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostsDetailResponse_DataValidationError) ErrorName() string {
	return "GetPostsDetailResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostsDetailResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostsDetailResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostsDetailResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostsDetailResponse_DataValidationError{}

// Validate checks the field values on DiscoveryPostsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoveryPostsResponse_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// DiscoveryPostsResponse_DataValidationError is the validation error returned
// by DiscoveryPostsResponse_Data.Validate if the designated constraints
// aren't met.
type DiscoveryPostsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPostsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPostsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPostsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPostsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPostsResponse_DataValidationError) ErrorName() string {
	return "DiscoveryPostsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPostsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPostsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPostsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPostsResponse_DataValidationError{}
