// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: mockers/fictio/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FictioServiceClient is the client API for FictioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FictioServiceClient interface {
	Fictio(ctx context.Context, in *FictioRequest, opts ...grpc.CallOption) (*FictioResponse, error)
}

type fictioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFictioServiceClient(cc grpc.ClientConnInterface) FictioServiceClient {
	return &fictioServiceClient{cc}
}

func (c *fictioServiceClient) Fictio(ctx context.Context, in *FictioRequest, opts ...grpc.CallOption) (*FictioResponse, error) {
	out := new(FictioResponse)
	err := c.cc.Invoke(ctx, "/fictio.api.FictioService/Fictio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FictioServiceServer is the server API for FictioService service.
// All implementations must embed UnimplementedFictioServiceServer
// for forward compatibility
type FictioServiceServer interface {
	Fictio(context.Context, *FictioRequest) (*FictioResponse, error)
	mustEmbedUnimplementedFictioServiceServer()
}

// UnimplementedFictioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFictioServiceServer struct {
}

func (UnimplementedFictioServiceServer) Fictio(context.Context, *FictioRequest) (*FictioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fictio not implemented")
}
func (UnimplementedFictioServiceServer) mustEmbedUnimplementedFictioServiceServer() {}

// UnsafeFictioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FictioServiceServer will
// result in compilation errors.
type UnsafeFictioServiceServer interface {
	mustEmbedUnimplementedFictioServiceServer()
}

func RegisterFictioServiceServer(s grpc.ServiceRegistrar, srv FictioServiceServer) {
	s.RegisterService(&FictioService_ServiceDesc, srv)
}

func _FictioService_Fictio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FictioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FictioServiceServer).Fictio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fictio.api.FictioService/Fictio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FictioServiceServer).Fictio(ctx, req.(*FictioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FictioService_ServiceDesc is the grpc.ServiceDesc for FictioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FictioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fictio.api.FictioService",
	HandlerType: (*FictioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fictio",
			Handler:    _FictioService_Fictio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockers/fictio/service.proto",
}
