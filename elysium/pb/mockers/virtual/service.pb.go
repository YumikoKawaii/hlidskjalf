// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mockers/virtual/service.proto

package api

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VirtualRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualRequest) Reset()         { *m = VirtualRequest{} }
func (m *VirtualRequest) String() string { return proto.CompactTextString(m) }
func (*VirtualRequest) ProtoMessage()    {}
func (*VirtualRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{0}
}
func (m *VirtualRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRequest.Merge(m, src)
}
func (m *VirtualRequest) XXX_Size() int {
	return m.Size()
}
func (m *VirtualRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRequest proto.InternalMessageInfo

type Quaternary struct {
	First                bool     `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               bool     `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	Third                bool     `protobuf:"varint,3,opt,name=third,proto3" json:"third,omitempty"`
	Fourth               bool     `protobuf:"varint,4,opt,name=fourth,proto3" json:"fourth,omitempty"`
	Fifth                bool     `protobuf:"varint,5,opt,name=fifth,proto3" json:"fifth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quaternary) Reset()         { *m = Quaternary{} }
func (m *Quaternary) String() string { return proto.CompactTextString(m) }
func (*Quaternary) ProtoMessage()    {}
func (*Quaternary) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{1}
}
func (m *Quaternary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quaternary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quaternary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quaternary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quaternary.Merge(m, src)
}
func (m *Quaternary) XXX_Size() int {
	return m.Size()
}
func (m *Quaternary) XXX_DiscardUnknown() {
	xxx_messageInfo_Quaternary.DiscardUnknown(m)
}

var xxx_messageInfo_Quaternary proto.InternalMessageInfo

func (m *Quaternary) GetFirst() bool {
	if m != nil {
		return m.First
	}
	return false
}

func (m *Quaternary) GetSecond() bool {
	if m != nil {
		return m.Second
	}
	return false
}

func (m *Quaternary) GetThird() bool {
	if m != nil {
		return m.Third
	}
	return false
}

func (m *Quaternary) GetFourth() bool {
	if m != nil {
		return m.Fourth
	}
	return false
}

func (m *Quaternary) GetFifth() bool {
	if m != nil {
		return m.Fifth
	}
	return false
}

type Tertiary struct {
	First                float64       `protobuf:"fixed64,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               float64       `protobuf:"fixed64,2,opt,name=second,proto3" json:"second,omitempty"`
	Third                float64       `protobuf:"fixed64,3,opt,name=third,proto3" json:"third,omitempty"`
	Fourth               float64       `protobuf:"fixed64,4,opt,name=fourth,proto3" json:"fourth,omitempty"`
	Fifth                float64       `protobuf:"fixed64,5,opt,name=fifth,proto3" json:"fifth,omitempty"`
	Quaternaries         []*Quaternary `protobuf:"bytes,6,rep,name=quaternaries,proto3" json:"quaternaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Tertiary) Reset()         { *m = Tertiary{} }
func (m *Tertiary) String() string { return proto.CompactTextString(m) }
func (*Tertiary) ProtoMessage()    {}
func (*Tertiary) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{2}
}
func (m *Tertiary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tertiary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tertiary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tertiary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tertiary.Merge(m, src)
}
func (m *Tertiary) XXX_Size() int {
	return m.Size()
}
func (m *Tertiary) XXX_DiscardUnknown() {
	xxx_messageInfo_Tertiary.DiscardUnknown(m)
}

var xxx_messageInfo_Tertiary proto.InternalMessageInfo

func (m *Tertiary) GetFirst() float64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Tertiary) GetSecond() float64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Tertiary) GetThird() float64 {
	if m != nil {
		return m.Third
	}
	return 0
}

func (m *Tertiary) GetFourth() float64 {
	if m != nil {
		return m.Fourth
	}
	return 0
}

func (m *Tertiary) GetFifth() float64 {
	if m != nil {
		return m.Fifth
	}
	return 0
}

func (m *Tertiary) GetQuaternaries() []*Quaternary {
	if m != nil {
		return m.Quaternaries
	}
	return nil
}

type Secondary struct {
	First                uint64      `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               uint64      `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	Third                uint64      `protobuf:"varint,3,opt,name=third,proto3" json:"third,omitempty"`
	Fourth               uint64      `protobuf:"varint,4,opt,name=fourth,proto3" json:"fourth,omitempty"`
	Fifth                uint64      `protobuf:"varint,5,opt,name=fifth,proto3" json:"fifth,omitempty"`
	Tertiaries           []*Tertiary `protobuf:"bytes,6,rep,name=tertiaries,proto3" json:"tertiaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Secondary) Reset()         { *m = Secondary{} }
func (m *Secondary) String() string { return proto.CompactTextString(m) }
func (*Secondary) ProtoMessage()    {}
func (*Secondary) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{3}
}
func (m *Secondary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Secondary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Secondary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Secondary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secondary.Merge(m, src)
}
func (m *Secondary) XXX_Size() int {
	return m.Size()
}
func (m *Secondary) XXX_DiscardUnknown() {
	xxx_messageInfo_Secondary.DiscardUnknown(m)
}

var xxx_messageInfo_Secondary proto.InternalMessageInfo

func (m *Secondary) GetFirst() uint64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Secondary) GetSecond() uint64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Secondary) GetThird() uint64 {
	if m != nil {
		return m.Third
	}
	return 0
}

func (m *Secondary) GetFourth() uint64 {
	if m != nil {
		return m.Fourth
	}
	return 0
}

func (m *Secondary) GetFifth() uint64 {
	if m != nil {
		return m.Fifth
	}
	return 0
}

func (m *Secondary) GetTertiaries() []*Tertiary {
	if m != nil {
		return m.Tertiaries
	}
	return nil
}

type Primary struct {
	First                uint32       `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               uint32       `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	Third                uint32       `protobuf:"varint,3,opt,name=third,proto3" json:"third,omitempty"`
	Fourth               uint32       `protobuf:"varint,4,opt,name=fourth,proto3" json:"fourth,omitempty"`
	Fifth                uint32       `protobuf:"varint,5,opt,name=fifth,proto3" json:"fifth,omitempty"`
	Sixth                uint32       `protobuf:"varint,6,opt,name=sixth,proto3" json:"sixth,omitempty"`
	Seventh              uint32       `protobuf:"varint,7,opt,name=seventh,proto3" json:"seventh,omitempty"`
	Eighth               uint32       `protobuf:"varint,8,opt,name=eighth,proto3" json:"eighth,omitempty"`
	Ninth                uint32       `protobuf:"varint,9,opt,name=ninth,proto3" json:"ninth,omitempty"`
	Tenth                uint32       `protobuf:"varint,10,opt,name=tenth,proto3" json:"tenth,omitempty"`
	Secondaries          []*Secondary `protobuf:"bytes,11,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Primary) Reset()         { *m = Primary{} }
func (m *Primary) String() string { return proto.CompactTextString(m) }
func (*Primary) ProtoMessage()    {}
func (*Primary) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{4}
}
func (m *Primary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Primary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Primary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Primary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Primary.Merge(m, src)
}
func (m *Primary) XXX_Size() int {
	return m.Size()
}
func (m *Primary) XXX_DiscardUnknown() {
	xxx_messageInfo_Primary.DiscardUnknown(m)
}

var xxx_messageInfo_Primary proto.InternalMessageInfo

func (m *Primary) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Primary) GetSecond() uint32 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Primary) GetThird() uint32 {
	if m != nil {
		return m.Third
	}
	return 0
}

func (m *Primary) GetFourth() uint32 {
	if m != nil {
		return m.Fourth
	}
	return 0
}

func (m *Primary) GetFifth() uint32 {
	if m != nil {
		return m.Fifth
	}
	return 0
}

func (m *Primary) GetSixth() uint32 {
	if m != nil {
		return m.Sixth
	}
	return 0
}

func (m *Primary) GetSeventh() uint32 {
	if m != nil {
		return m.Seventh
	}
	return 0
}

func (m *Primary) GetEighth() uint32 {
	if m != nil {
		return m.Eighth
	}
	return 0
}

func (m *Primary) GetNinth() uint32 {
	if m != nil {
		return m.Ninth
	}
	return 0
}

func (m *Primary) GetTenth() uint32 {
	if m != nil {
		return m.Tenth
	}
	return 0
}

func (m *Primary) GetSecondaries() []*Secondary {
	if m != nil {
		return m.Secondaries
	}
	return nil
}

type Stat struct {
	First                string     `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               string     `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	Third                string     `protobuf:"bytes,3,opt,name=third,proto3" json:"third,omitempty"`
	Fourth               string     `protobuf:"bytes,4,opt,name=fourth,proto3" json:"fourth,omitempty"`
	Fifth                string     `protobuf:"bytes,5,opt,name=fifth,proto3" json:"fifth,omitempty"`
	Primaries            []*Primary `protobuf:"bytes,6,rep,name=primaries,proto3" json:"primaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Stat) Reset()         { *m = Stat{} }
func (m *Stat) String() string { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()    {}
func (*Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{5}
}
func (m *Stat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat.Merge(m, src)
}
func (m *Stat) XXX_Size() int {
	return m.Size()
}
func (m *Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_Stat proto.InternalMessageInfo

func (m *Stat) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Stat) GetSecond() string {
	if m != nil {
		return m.Second
	}
	return ""
}

func (m *Stat) GetThird() string {
	if m != nil {
		return m.Third
	}
	return ""
}

func (m *Stat) GetFourth() string {
	if m != nil {
		return m.Fourth
	}
	return ""
}

func (m *Stat) GetFifth() string {
	if m != nil {
		return m.Fifth
	}
	return ""
}

func (m *Stat) GetPrimaries() []*Primary {
	if m != nil {
		return m.Primaries
	}
	return nil
}

type VirtualResponse struct {
	Code                 uint32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *VirtualResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *VirtualResponse) Reset()         { *m = VirtualResponse{} }
func (m *VirtualResponse) String() string { return proto.CompactTextString(m) }
func (*VirtualResponse) ProtoMessage()    {}
func (*VirtualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{6}
}
func (m *VirtualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualResponse.Merge(m, src)
}
func (m *VirtualResponse) XXX_Size() int {
	return m.Size()
}
func (m *VirtualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualResponse proto.InternalMessageInfo

func (m *VirtualResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VirtualResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VirtualResponse) GetData() *VirtualResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type VirtualResponse_Data struct {
	Stats                []*Stat  `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualResponse_Data) Reset()         { *m = VirtualResponse_Data{} }
func (m *VirtualResponse_Data) String() string { return proto.CompactTextString(m) }
func (*VirtualResponse_Data) ProtoMessage()    {}
func (*VirtualResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_544a9953dd2c4f7b, []int{6, 0}
}
func (m *VirtualResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualResponse_Data.Merge(m, src)
}
func (m *VirtualResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *VirtualResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualResponse_Data proto.InternalMessageInfo

func (m *VirtualResponse_Data) GetStats() []*Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*VirtualRequest)(nil), "virtual.api.VirtualRequest")
	proto.RegisterType((*Quaternary)(nil), "virtual.api.Quaternary")
	proto.RegisterType((*Tertiary)(nil), "virtual.api.Tertiary")
	proto.RegisterType((*Secondary)(nil), "virtual.api.Secondary")
	proto.RegisterType((*Primary)(nil), "virtual.api.Primary")
	proto.RegisterType((*Stat)(nil), "virtual.api.Stat")
	proto.RegisterType((*VirtualResponse)(nil), "virtual.api.VirtualResponse")
	proto.RegisterType((*VirtualResponse_Data)(nil), "virtual.api.VirtualResponse.Data")
}

func init() { proto.RegisterFile("mockers/virtual/service.proto", fileDescriptor_544a9953dd2c4f7b) }

var fileDescriptor_544a9953dd2c4f7b = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd9, 0xd6, 0x49, 0xea, 0x09, 0xa1, 0x74, 0x55, 0x5a, 0x2b, 0x94, 0xa8, 0xf8, 0x42,
	0x4f, 0x31, 0x04, 0x55, 0x42, 0xea, 0xad, 0xe2, 0x01, 0xc0, 0x45, 0x1c, 0x90, 0x10, 0xda, 0x26,
	0x9b, 0x78, 0x45, 0xe2, 0x75, 0x77, 0x27, 0x81, 0x5e, 0x38, 0xf0, 0x0a, 0x5c, 0x78, 0x03, 0x84,
	0xc4, 0x91, 0x0b, 0x6f, 0xc0, 0x11, 0x89, 0x17, 0x40, 0x85, 0x07, 0x41, 0xde, 0xf5, 0x36, 0x35,
	0x59, 0x71, 0xf3, 0x3f, 0xfb, 0x77, 0xe6, 0xeb, 0x3f, 0xca, 0xc0, 0x9d, 0x99, 0x1c, 0xbe, 0xe6,
	0x4a, 0x27, 0x0b, 0xa1, 0x70, 0xce, 0xa6, 0x89, 0xe6, 0x6a, 0x21, 0x86, 0xbc, 0x5f, 0x28, 0x89,
	0x92, 0xb6, 0xab, 0x72, 0x9f, 0x15, 0xa2, 0xbb, 0x37, 0x91, 0x72, 0x32, 0xe5, 0x09, 0x2b, 0x44,
	0xc2, 0xf2, 0x5c, 0x22, 0x43, 0x21, 0x73, 0x6d, 0xad, 0xdd, 0x5e, 0xf5, 0x6a, 0xd4, 0xe9, 0x7c,
	0x9c, 0xbc, 0x51, 0xac, 0x28, 0xb8, 0x72, 0xef, 0xbb, 0x0b, 0x36, 0x15, 0x23, 0x86, 0x3c, 0x71,
	0x1f, 0xf6, 0x21, 0xbe, 0x09, 0x37, 0x9e, 0xdb, 0x29, 0x29, 0x3f, 0x9b, 0x73, 0x8d, 0xf1, 0x3b,
	0x80, 0xa7, 0x73, 0x86, 0x5c, 0xe5, 0x4c, 0x9d, 0xd3, 0x6d, 0x68, 0x8c, 0x85, 0xd2, 0x18, 0x91,
	0x7d, 0x72, 0xb0, 0x91, 0x5a, 0x41, 0x77, 0xa0, 0xa9, 0xf9, 0x50, 0xe6, 0xa3, 0x68, 0xcd, 0x94,
	0x2b, 0x55, 0xba, 0x31, 0x13, 0x6a, 0x14, 0xad, 0x5b, 0xb7, 0x11, 0xa5, 0x7b, 0x2c, 0xe7, 0x0a,
	0xb3, 0x28, 0xb0, 0x6e, 0xab, 0x6c, 0xef, 0x31, 0x66, 0x51, 0xc3, 0xf5, 0x1e, 0x63, 0x16, 0x7f,
	0x23, 0xb0, 0xf1, 0x8c, 0x2b, 0x14, 0x2b, 0xe3, 0x89, 0x7f, 0x3c, 0xf1, 0x8f, 0x27, 0xfe, 0xf1,
	0xc4, 0x3f, 0x9e, 0x54, 0xe3, 0xe9, 0x11, 0x5c, 0x3f, 0x73, 0xff, 0xbe, 0xe0, 0x3a, 0x6a, 0xee,
	0xaf, 0x1f, 0xb4, 0x07, 0xbb, 0xfd, 0x2b, 0xbb, 0xe8, 0x2f, 0xf3, 0x49, 0x6b, 0xe6, 0xf8, 0x2b,
	0x81, 0xf0, 0xc4, 0xb0, 0xac, 0xc0, 0x07, 0x7e, 0xf8, 0xc0, 0x0f, 0x1f, 0xf8, 0xe1, 0x03, 0x3f,
	0x7c, 0xe0, 0xe0, 0x0f, 0x01, 0xd0, 0x46, 0xb7, 0x44, 0xbf, 0x55, 0x43, 0x77, 0xc9, 0xa6, 0x57,
	0x8c, 0xf1, 0xe7, 0x35, 0x68, 0x3d, 0x51, 0x62, 0xb6, 0x02, 0xdd, 0xf1, 0x43, 0x77, 0xfc, 0xd0,
	0x1d, 0x3f, 0x74, 0xc7, 0x0f, 0xdd, 0x71, 0xd0, 0xdb, 0xd0, 0xd0, 0xe2, 0x2d, 0x66, 0x51, 0xd3,
	0x56, 0x8d, 0xa0, 0x11, 0xb4, 0x34, 0x5f, 0xf0, 0x1c, 0xb3, 0xa8, 0x65, 0xea, 0x4e, 0x96, 0xdd,
	0xb9, 0x98, 0x64, 0x98, 0x45, 0x1b, 0xb6, 0xbb, 0x55, 0x65, 0x9f, 0x5c, 0x94, 0xfe, 0xd0, 0xf6,
	0x31, 0xc2, 0x10, 0x9a, 0x2e, 0x50, 0x11, 0x9a, 0x1e, 0x8f, 0xa0, 0xad, 0xab, 0x3d, 0x95, 0x49,
	0xb5, 0x4d, 0x52, 0x3b, 0xb5, 0xa4, 0x2e, 0xf7, 0x98, 0x5e, 0xb5, 0xc6, 0x5f, 0x08, 0x04, 0x27,
	0xc8, 0xb0, 0x1e, 0x54, 0xe8, 0x0f, 0x2a, 0xf4, 0x07, 0x15, 0xfa, 0x83, 0x0a, 0xfd, 0x41, 0x85,
	0x2e, 0xa8, 0x01, 0x84, 0x85, 0xd9, 0xd2, 0x72, 0xb9, 0xdb, 0x35, 0xe4, 0x6a, 0x87, 0xe9, 0xd2,
	0x16, 0x7f, 0x22, 0xb0, 0x79, 0xf9, 0x03, 0xd7, 0x85, 0xcc, 0x35, 0xa7, 0x14, 0x82, 0xa1, 0x1c,
	0xf1, 0x6a, 0xc3, 0xe6, 0xbb, 0x8c, 0x7b, 0xc6, 0xb5, 0x66, 0x13, 0x5e, 0x81, 0x3b, 0x49, 0x0f,
	0x21, 0x18, 0x31, 0x64, 0x06, 0xbc, 0x3d, 0xb8, 0x5b, 0x1b, 0xf8, 0x4f, 0xe7, 0xfe, 0x63, 0x86,
	0x2c, 0x35, 0xf6, 0x6e, 0x02, 0x41, 0xa9, 0xe8, 0x3d, 0x68, 0x68, 0x64, 0xa8, 0x23, 0x62, 0x80,
	0xb7, 0xea, 0x19, 0x23, 0xc3, 0xd4, 0xbe, 0x0f, 0xe4, 0xe5, 0x25, 0x3a, 0xb1, 0x57, 0x90, 0xbe,
	0x84, 0x56, 0x55, 0xa1, 0xb7, 0xfd, 0x63, 0xcd, 0xc5, 0xea, 0xee, 0xfd, 0x8f, 0x29, 0xde, 0x7d,
	0xff, 0xf3, 0xcf, 0x87, 0xb5, 0x2d, 0xba, 0x69, 0x4e, 0xe7, 0xe2, 0x81, 0x3b, 0xb6, 0xc7, 0xc7,
	0xdf, 0x2f, 0x7a, 0xe4, 0xc7, 0x45, 0x8f, 0xfc, 0xba, 0xe8, 0x91, 0x8f, 0xbf, 0x7b, 0xd7, 0x5e,
	0xdc, 0xe7, 0xd3, 0x73, 0x2d, 0xe6, 0xb3, 0xfe, 0x50, 0xce, 0x12, 0x56, 0x14, 0x53, 0x31, 0xb4,
	0x57, 0xd6, 0xfd, 0xcd, 0xab, 0xea, 0x40, 0x97, 0xad, 0x8e, 0x58, 0x21, 0x4e, 0x9b, 0xe6, 0x8a,
	0x3e, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xdd, 0x58, 0x35, 0xca, 0x05, 0x00, 0x00,
}

func (m *VirtualRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Quaternary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quaternary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quaternary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fifth {
		i--
		if m.Fifth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Fourth {
		i--
		if m.Fourth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Third {
		i--
		if m.Third {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Second {
		i--
		if m.Second {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.First {
		i--
		if m.First {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tertiary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tertiary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tertiary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Quaternaries) > 0 {
		for iNdEx := len(m.Quaternaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quaternaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Fifth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fifth))))
		i--
		dAtA[i] = 0x29
	}
	if m.Fourth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fourth))))
		i--
		dAtA[i] = 0x21
	}
	if m.Third != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Third))))
		i--
		dAtA[i] = 0x19
	}
	if m.Second != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Second))))
		i--
		dAtA[i] = 0x11
	}
	if m.First != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.First))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Secondary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Secondary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Secondary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tertiaries) > 0 {
		for iNdEx := len(m.Tertiaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tertiaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Fifth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Fifth))
		i--
		dAtA[i] = 0x28
	}
	if m.Fourth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Fourth))
		i--
		dAtA[i] = 0x20
	}
	if m.Third != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Third))
		i--
		dAtA[i] = 0x18
	}
	if m.Second != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Second))
		i--
		dAtA[i] = 0x10
	}
	if m.First != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Primary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Primary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Primary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Secondaries) > 0 {
		for iNdEx := len(m.Secondaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Secondaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Tenth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Tenth))
		i--
		dAtA[i] = 0x50
	}
	if m.Ninth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Ninth))
		i--
		dAtA[i] = 0x48
	}
	if m.Eighth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Eighth))
		i--
		dAtA[i] = 0x40
	}
	if m.Seventh != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Seventh))
		i--
		dAtA[i] = 0x38
	}
	if m.Sixth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Sixth))
		i--
		dAtA[i] = 0x30
	}
	if m.Fifth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Fifth))
		i--
		dAtA[i] = 0x28
	}
	if m.Fourth != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Fourth))
		i--
		dAtA[i] = 0x20
	}
	if m.Third != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Third))
		i--
		dAtA[i] = 0x18
	}
	if m.Second != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Second))
		i--
		dAtA[i] = 0x10
	}
	if m.First != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Primaries) > 0 {
		for iNdEx := len(m.Primaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Primaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fifth) > 0 {
		i -= len(m.Fifth)
		copy(dAtA[i:], m.Fifth)
		i = encodeVarintService(dAtA, i, uint64(len(m.Fifth)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fourth) > 0 {
		i -= len(m.Fourth)
		copy(dAtA[i:], m.Fourth)
		i = encodeVarintService(dAtA, i, uint64(len(m.Fourth)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Third) > 0 {
		i -= len(m.Third)
		copy(dAtA[i:], m.Third)
		i = encodeVarintService(dAtA, i, uint64(len(m.Third)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Second) > 0 {
		i -= len(m.Second)
		copy(dAtA[i:], m.Second)
		i = encodeVarintService(dAtA, i, uint64(len(m.Second)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.First) > 0 {
		i -= len(m.First)
		copy(dAtA[i:], m.First)
		i = encodeVarintService(dAtA, i, uint64(len(m.First)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VirtualResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Quaternary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First {
		n += 2
	}
	if m.Second {
		n += 2
	}
	if m.Third {
		n += 2
	}
	if m.Fourth {
		n += 2
	}
	if m.Fifth {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tertiary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 9
	}
	if m.Second != 0 {
		n += 9
	}
	if m.Third != 0 {
		n += 9
	}
	if m.Fourth != 0 {
		n += 9
	}
	if m.Fifth != 0 {
		n += 9
	}
	if len(m.Quaternaries) > 0 {
		for _, e := range m.Quaternaries {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Secondary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovService(uint64(m.First))
	}
	if m.Second != 0 {
		n += 1 + sovService(uint64(m.Second))
	}
	if m.Third != 0 {
		n += 1 + sovService(uint64(m.Third))
	}
	if m.Fourth != 0 {
		n += 1 + sovService(uint64(m.Fourth))
	}
	if m.Fifth != 0 {
		n += 1 + sovService(uint64(m.Fifth))
	}
	if len(m.Tertiaries) > 0 {
		for _, e := range m.Tertiaries {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Primary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovService(uint64(m.First))
	}
	if m.Second != 0 {
		n += 1 + sovService(uint64(m.Second))
	}
	if m.Third != 0 {
		n += 1 + sovService(uint64(m.Third))
	}
	if m.Fourth != 0 {
		n += 1 + sovService(uint64(m.Fourth))
	}
	if m.Fifth != 0 {
		n += 1 + sovService(uint64(m.Fifth))
	}
	if m.Sixth != 0 {
		n += 1 + sovService(uint64(m.Sixth))
	}
	if m.Seventh != 0 {
		n += 1 + sovService(uint64(m.Seventh))
	}
	if m.Eighth != 0 {
		n += 1 + sovService(uint64(m.Eighth))
	}
	if m.Ninth != 0 {
		n += 1 + sovService(uint64(m.Ninth))
	}
	if m.Tenth != 0 {
		n += 1 + sovService(uint64(m.Tenth))
	}
	if len(m.Secondaries) > 0 {
		for _, e := range m.Secondaries {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Second)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Third)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Fourth)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Fifth)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Primaries) > 0 {
		for _, e := range m.Primaries {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VirtualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovService(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VirtualResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quaternary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quaternary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quaternary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.First = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Second = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Third = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fourth = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fifth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fifth = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tertiary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tertiary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tertiary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.First = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Second = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Third = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fourth = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fifth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fifth = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quaternaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quaternaries = append(m.Quaternaries, &Quaternary{})
			if err := m.Quaternaries[len(m.Quaternaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Secondary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Secondary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Secondary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			m.Second = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Second |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			m.Third = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Third |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourth", wireType)
			}
			m.Fourth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fifth", wireType)
			}
			m.Fifth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fifth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tertiaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tertiaries = append(m.Tertiaries, &Tertiary{})
			if err := m.Tertiaries[len(m.Tertiaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Primary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Primary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Primary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			m.Second = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Second |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			m.Third = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Third |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourth", wireType)
			}
			m.Fourth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fifth", wireType)
			}
			m.Fifth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fifth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sixth", wireType)
			}
			m.Sixth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sixth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seventh", wireType)
			}
			m.Seventh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seventh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eighth", wireType)
			}
			m.Eighth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eighth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ninth", wireType)
			}
			m.Ninth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ninth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenth", wireType)
			}
			m.Tenth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tenth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secondaries = append(m.Secondaries, &Secondary{})
			if err := m.Secondaries[len(m.Secondaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Second = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Third", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Third = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fourth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fifth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fifth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primaries = append(m.Primaries, &Primary{})
			if err := m.Primaries[len(m.Primaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &VirtualResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &Stat{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
