// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: mockers/presentation/service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PresentationServiceClient is the client API for PresentationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresentationServiceClient interface {
	Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Faux(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Fictio(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Mimic(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Virtual(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type presentationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresentationServiceClient(cc grpc.ClientConnInterface) PresentationServiceClient {
	return &presentationServiceClient{cc}
}

func (c *presentationServiceClient) Echo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/presentation.api.PresentationService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationServiceClient) Faux(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/presentation.api.PresentationService/Faux", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationServiceClient) Fictio(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/presentation.api.PresentationService/Fictio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationServiceClient) Mimic(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/presentation.api.PresentationService/Mimic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationServiceClient) Virtual(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/presentation.api.PresentationService/Virtual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresentationServiceServer is the server API for PresentationService service.
// All implementations must embed UnimplementedPresentationServiceServer
// for forward compatibility
type PresentationServiceServer interface {
	Echo(context.Context, *Request) (*Response, error)
	Faux(context.Context, *Request) (*Response, error)
	Fictio(context.Context, *Request) (*Response, error)
	Mimic(context.Context, *Request) (*Response, error)
	Virtual(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedPresentationServiceServer()
}

// UnimplementedPresentationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPresentationServiceServer struct {
}

func (UnimplementedPresentationServiceServer) Echo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedPresentationServiceServer) Faux(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Faux not implemented")
}
func (UnimplementedPresentationServiceServer) Fictio(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fictio not implemented")
}
func (UnimplementedPresentationServiceServer) Mimic(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mimic not implemented")
}
func (UnimplementedPresentationServiceServer) Virtual(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Virtual not implemented")
}
func (UnimplementedPresentationServiceServer) mustEmbedUnimplementedPresentationServiceServer() {}

// UnsafePresentationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresentationServiceServer will
// result in compilation errors.
type UnsafePresentationServiceServer interface {
	mustEmbedUnimplementedPresentationServiceServer()
}

func RegisterPresentationServiceServer(s grpc.ServiceRegistrar, srv PresentationServiceServer) {
	s.RegisterService(&PresentationService_ServiceDesc, srv)
}

func _PresentationService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presentation.api.PresentationService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServiceServer).Echo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentationService_Faux_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServiceServer).Faux(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presentation.api.PresentationService/Faux",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServiceServer).Faux(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentationService_Fictio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServiceServer).Fictio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presentation.api.PresentationService/Fictio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServiceServer).Fictio(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentationService_Mimic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServiceServer).Mimic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presentation.api.PresentationService/Mimic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServiceServer).Mimic(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentationService_Virtual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServiceServer).Virtual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presentation.api.PresentationService/Virtual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServiceServer).Virtual(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PresentationService_ServiceDesc is the grpc.ServiceDesc for PresentationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresentationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "presentation.api.PresentationService",
	HandlerType: (*PresentationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _PresentationService_Echo_Handler,
		},
		{
			MethodName: "Faux",
			Handler:    _PresentationService_Faux_Handler,
		},
		{
			MethodName: "Fictio",
			Handler:    _PresentationService_Fictio_Handler,
		},
		{
			MethodName: "Mimic",
			Handler:    _PresentationService_Mimic_Handler,
		},
		{
			MethodName: "Virtual",
			Handler:    _PresentationService_Virtual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockers/presentation/service.proto",
}
