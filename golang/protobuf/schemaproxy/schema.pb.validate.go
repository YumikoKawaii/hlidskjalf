// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schemaproxy/schema.proto

package schemaproxy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _schema_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// TestRequestValidationError is the validation error returned by
// TestRequest.Validate if the designated constraints aren't met.
type TestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRequestValidationError) ErrorName() string { return "TestRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRequestValidationError{}

// Validate checks the field values on TestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// TestResponseValidationError is the validation error returned by
// TestResponse.Validate if the designated constraints aren't met.
type TestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestResponseValidationError) ErrorName() string { return "TestResponseValidationError" }

// Error satisfies the builtin error interface
func (e TestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestResponseValidationError{}

// Validate checks the field values on DeleteSubjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSubjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		return DeleteSubjectRequestValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteSubjectRequestValidationError is the validation error returned by
// DeleteSubjectRequest.Validate if the designated constraints aren't met.
type DeleteSubjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectRequestValidationError) ErrorName() string {
	return "DeleteSubjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectRequestValidationError{}

// Validate checks the field values on DeleteSubjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSubjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// DeleteSubjectResponseValidationError is the validation error returned by
// DeleteSubjectResponse.Validate if the designated constraints aren't met.
type DeleteSubjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubjectResponseValidationError) ErrorName() string {
	return "DeleteSubjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubjectResponseValidationError{}

// Validate checks the field values on CheckSchemaCompatibilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckSchemaCompatibilityRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckSchemaCompatibilityRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckSchemaCompatibilityRequestValidationError is the validation error
// returned by CheckSchemaCompatibilityRequest.Validate if the designated
// constraints aren't met.
type CheckSchemaCompatibilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSchemaCompatibilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSchemaCompatibilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSchemaCompatibilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSchemaCompatibilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSchemaCompatibilityRequestValidationError) ErrorName() string {
	return "CheckSchemaCompatibilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSchemaCompatibilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSchemaCompatibilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSchemaCompatibilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSchemaCompatibilityRequestValidationError{}

// Validate checks the field values on CheckSchemaCompatibilityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckSchemaCompatibilityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// CheckSchemaCompatibilityResponseValidationError is the validation error
// returned by CheckSchemaCompatibilityResponse.Validate if the designated
// constraints aren't met.
type CheckSchemaCompatibilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSchemaCompatibilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSchemaCompatibilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSchemaCompatibilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSchemaCompatibilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSchemaCompatibilityResponseValidationError) ErrorName() string {
	return "CheckSchemaCompatibilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSchemaCompatibilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSchemaCompatibilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSchemaCompatibilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSchemaCompatibilityResponseValidationError{}

// Validate checks the field values on GetSubjectVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubjectVersionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		return GetSubjectVersionsRequestValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetSubjectVersionsRequestValidationError is the validation error returned by
// GetSubjectVersionsRequest.Validate if the designated constraints aren't met.
type GetSubjectVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectVersionsRequestValidationError) ErrorName() string {
	return "GetSubjectVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectVersionsRequestValidationError{}

// Validate checks the field values on GetSubjectVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubjectVersionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSubjectVersionsResponseValidationError is the validation error returned
// by GetSubjectVersionsResponse.Validate if the designated constraints aren't met.
type GetSubjectVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubjectVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubjectVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubjectVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubjectVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubjectVersionsResponseValidationError) ErrorName() string {
	return "GetSubjectVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubjectVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubjectVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubjectVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubjectVersionsResponseValidationError{}

// Validate checks the field values on GetSchemasRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSchemasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubjectVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSchemasRequestValidationError{
				field:  "SubjectVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSchemasRequestValidationError is the validation error returned by
// GetSchemasRequest.Validate if the designated constraints aren't met.
type GetSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemasRequestValidationError) ErrorName() string {
	return "GetSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemasRequestValidationError{}

// Validate checks the field values on GetSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSchemasResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSchemasResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSchemasResponseValidationError is the validation error returned by
// GetSchemasResponse.Validate if the designated constraints aren't met.
type GetSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemasResponseValidationError) ErrorName() string {
	return "GetSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemasResponseValidationError{}

// Validate checks the field values on UpdateCompatibilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCompatibilityRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Compatibility

	return nil
}

// UpdateCompatibilityRequestValidationError is the validation error returned
// by UpdateCompatibilityRequest.Validate if the designated constraints aren't met.
type UpdateCompatibilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompatibilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompatibilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompatibilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompatibilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompatibilityRequestValidationError) ErrorName() string {
	return "UpdateCompatibilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompatibilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompatibilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompatibilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompatibilityRequestValidationError{}

// Validate checks the field values on UpdateCompatibilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCompatibilityResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UpdateCompatibilityResponseValidationError is the validation error returned
// by UpdateCompatibilityResponse.Validate if the designated constraints
// aren't met.
type UpdateCompatibilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompatibilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompatibilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompatibilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompatibilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompatibilityResponseValidationError) ErrorName() string {
	return "UpdateCompatibilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompatibilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompatibilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompatibilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompatibilityResponseValidationError{}
