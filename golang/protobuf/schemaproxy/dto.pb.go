// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schemaproxy/dto.proto

package schemaproxy

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterSchemaRequest struct {
	Schema               string               `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	SchemaType           string               `protobuf:"bytes,2,opt,name=schema_type,json=schemaType,proto3" json:"schemaType"`
	References           []*RegistryReference `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
	Subject              string               `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RegisterSchemaRequest) Reset()         { *m = RegisterSchemaRequest{} }
func (m *RegisterSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterSchemaRequest) ProtoMessage()    {}
func (*RegisterSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{0}
}
func (m *RegisterSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSchemaRequest.Merge(m, src)
}
func (m *RegisterSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSchemaRequest proto.InternalMessageInfo

func (m *RegisterSchemaRequest) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *RegisterSchemaRequest) GetSchemaType() string {
	if m != nil {
		return m.SchemaType
	}
	return ""
}

func (m *RegisterSchemaRequest) GetReferences() []*RegistryReference {
	if m != nil {
		return m.References
	}
	return nil
}

func (m *RegisterSchemaRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type RegistryReference struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subject              string   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryReference) Reset()         { *m = RegistryReference{} }
func (m *RegistryReference) String() string { return proto.CompactTextString(m) }
func (*RegistryReference) ProtoMessage()    {}
func (*RegistryReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{1}
}
func (m *RegistryReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryReference.Merge(m, src)
}
func (m *RegistryReference) XXX_Size() int {
	return m.Size()
}
func (m *RegistryReference) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryReference.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryReference proto.InternalMessageInfo

func (m *RegistryReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryReference) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *RegistryReference) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RegistryResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject              string   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	IsRegistered         bool     `protobuf:"varint,4,opt,name=is_registered,json=isRegistered,proto3" json:"isRegistered"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryResponse) Reset()         { *m = RegistryResponse{} }
func (m *RegistryResponse) String() string { return proto.CompactTextString(m) }
func (*RegistryResponse) ProtoMessage()    {}
func (*RegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{2}
}
func (m *RegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryResponse.Merge(m, src)
}
func (m *RegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryResponse proto.InternalMessageInfo

func (m *RegistryResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RegistryResponse) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *RegistryResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegistryResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type SchemaVersionInfo struct {
	SchemaId             int32    `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Subject              string   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectVersion       int32    `protobuf:"varint,3,opt,name=subject_version,json=subjectVersion,proto3" json:"subjectVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaVersionInfo) Reset()         { *m = SchemaVersionInfo{} }
func (m *SchemaVersionInfo) String() string { return proto.CompactTextString(m) }
func (*SchemaVersionInfo) ProtoMessage()    {}
func (*SchemaVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{3}
}
func (m *SchemaVersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaVersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaVersionInfo.Merge(m, src)
}
func (m *SchemaVersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SchemaVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaVersionInfo proto.InternalMessageInfo

func (m *SchemaVersionInfo) GetSchemaId() int32 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *SchemaVersionInfo) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SchemaVersionInfo) GetSubjectVersion() int32 {
	if m != nil {
		return m.SubjectVersion
	}
	return 0
}

type SubjectVersionInfo struct {
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubjectVersionInfo) Reset()         { *m = SubjectVersionInfo{} }
func (m *SubjectVersionInfo) String() string { return proto.CompactTextString(m) }
func (*SubjectVersionInfo) ProtoMessage()    {}
func (*SubjectVersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{4}
}
func (m *SubjectVersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectVersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectVersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectVersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectVersionInfo.Merge(m, src)
}
func (m *SubjectVersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubjectVersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectVersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectVersionInfo proto.InternalMessageInfo

func (m *SubjectVersionInfo) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SubjectVersionInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RegistrySchema struct {
	Subject              string               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Version              int32                `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Id                   int32                `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	SchemaType           string               `protobuf:"bytes,4,opt,name=schema_type,json=schemaType,proto3" json:"schemaType"`
	Schema               string               `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	References           []*RegistryReference `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RegistrySchema) Reset()         { *m = RegistrySchema{} }
func (m *RegistrySchema) String() string { return proto.CompactTextString(m) }
func (*RegistrySchema) ProtoMessage()    {}
func (*RegistrySchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_33882b3740e746f4, []int{5}
}
func (m *RegistrySchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrySchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrySchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrySchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrySchema.Merge(m, src)
}
func (m *RegistrySchema) XXX_Size() int {
	return m.Size()
}
func (m *RegistrySchema) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrySchema.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrySchema proto.InternalMessageInfo

func (m *RegistrySchema) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *RegistrySchema) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegistrySchema) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RegistrySchema) GetSchemaType() string {
	if m != nil {
		return m.SchemaType
	}
	return ""
}

func (m *RegistrySchema) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *RegistrySchema) GetReferences() []*RegistryReference {
	if m != nil {
		return m.References
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterSchemaRequest)(nil), "hlidskjalf.schemaproxy.RegisterSchemaRequest")
	proto.RegisterType((*RegistryReference)(nil), "hlidskjalf.schemaproxy.RegistryReference")
	proto.RegisterType((*RegistryResponse)(nil), "hlidskjalf.schemaproxy.RegistryResponse")
	proto.RegisterType((*SchemaVersionInfo)(nil), "hlidskjalf.schemaproxy.SchemaVersionInfo")
	proto.RegisterType((*SubjectVersionInfo)(nil), "hlidskjalf.schemaproxy.SubjectVersionInfo")
	proto.RegisterType((*RegistrySchema)(nil), "hlidskjalf.schemaproxy.RegistrySchema")
}

func init() { proto.RegisterFile("schemaproxy/dto.proto", fileDescriptor_33882b3740e746f4) }

var fileDescriptor_33882b3740e746f4 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0x76, 0x36, 0x1f, 0x6d, 0xa7, 0x1a, 0xd3, 0xc1, 0xc6, 0x25, 0x85, 0x24, 0x06, 0x0f, 0x29,
	0xc2, 0x2e, 0x54, 0x3c, 0x09, 0x82, 0x73, 0x10, 0xa3, 0x62, 0xca, 0xa4, 0x16, 0xf4, 0x60, 0xd8,
	0x64, 0x27, 0x9b, 0x69, 0x93, 0x9d, 0x75, 0x66, 0xb7, 0x1a, 0xe8, 0x5f, 0x10, 0x3c, 0xfa, 0x93,
	0x3c, 0xfa, 0x0b, 0x82, 0xc4, 0x8b, 0xe4, 0x27, 0xf4, 0x24, 0x99, 0xd9, 0x4d, 0x76, 0xeb, 0xc7,
	0xa1, 0xbd, 0xbd, 0x9f, 0xcf, 0xfb, 0xbc, 0x5f, 0x70, 0x57, 0x0e, 0x46, 0x74, 0xe2, 0x04, 0x82,
	0x7f, 0x9a, 0xda, 0x6e, 0xc8, 0xad, 0x40, 0xf0, 0x90, 0xa3, 0xca, 0x68, 0xcc, 0x5c, 0x79, 0x7a,
	0xe2, 0x8c, 0x87, 0x56, 0x2a, 0xa2, 0x7a, 0xc7, 0xe3, 0x1e, 0x57, 0x21, 0xf6, 0x52, 0xd2, 0xd1,
	0xd5, 0xbb, 0x67, 0xce, 0x98, 0xb9, 0x4e, 0x48, 0xed, 0x44, 0xd0, 0x8e, 0xe6, 0x1c, 0xc0, 0x5d,
	0x42, 0x3d, 0x26, 0x43, 0x2a, 0xba, 0x0a, 0x86, 0xd0, 0x0f, 0x11, 0x95, 0x21, 0xaa, 0xc0, 0xa2,
	0xc6, 0x35, 0x41, 0x03, 0xb4, 0xb6, 0x48, 0xac, 0xa1, 0x57, 0x70, 0x5b, 0x4b, 0xbd, 0x70, 0x1a,
	0x50, 0xd3, 0x58, 0x3a, 0xf1, 0x83, 0x0b, 0x5c, 0x15, 0xe6, 0x41, 0xe5, 0x7d, 0xeb, 0xe9, 0x31,
	0xe9, 0x9c, 0xbf, 0xe8, 0x76, 0x5e, 0x9f, 0x1f, 0x92, 0xce, 0x51, 0x07, 0xbf, 0x79, 0xb6, 0x7f,
	0x7f, 0x31, 0xab, 0x43, 0x9d, 0x73, 0x34, 0x0d, 0x28, 0x49, 0xc9, 0xa8, 0x0d, 0xa1, 0xa0, 0x43,
	0x2a, 0xa8, 0x3f, 0xa0, 0xd2, 0xcc, 0x35, 0x72, 0xad, 0xed, 0x83, 0x7d, 0xeb, 0xef, 0xbd, 0x59,
	0x9a, 0xa8, 0x98, 0x92, 0x24, 0x83, 0xa4, 0x92, 0x91, 0x09, 0x37, 0x64, 0xd4, 0x3f, 0xa1, 0x83,
	0xd0, 0xcc, 0x2b, 0xc6, 0x89, 0xda, 0x74, 0xe1, 0xce, 0x1f, 0xa9, 0x68, 0x0f, 0xe6, 0x7d, 0x67,
	0x42, 0x75, 0x77, 0x78, 0xe3, 0x02, 0xe7, 0x85, 0x51, 0x06, 0x44, 0x19, 0xd3, 0x58, 0x46, 0x06,
	0x6b, 0xe9, 0x39, 0xa3, 0x42, 0x32, 0xee, 0x9b, 0xb9, 0x06, 0x68, 0x15, 0x48, 0xa2, 0x36, 0x3f,
	0x03, 0x58, 0x5e, 0x97, 0x91, 0x01, 0xf7, 0x25, 0x45, 0x25, 0x68, 0x30, 0x57, 0xd5, 0x28, 0x10,
	0x83, 0xb9, 0x57, 0x01, 0x46, 0x8f, 0xe0, 0x2d, 0x26, 0x7b, 0x22, 0xde, 0x12, 0x75, 0x55, 0x7b,
	0x9b, 0xb8, 0xbc, 0x98, 0xd5, 0x6f, 0x32, 0x49, 0x56, 0x76, 0x92, 0xd1, 0x9a, 0x5f, 0x00, 0xdc,
	0xd1, 0x2b, 0x3d, 0xd6, 0x40, 0x6d, 0x7f, 0xc8, 0xd1, 0x1e, 0xdc, 0x8a, 0xd7, 0xb7, 0xe2, 0xb5,
	0xa9, 0x0d, 0x6d, 0x17, 0xdd, 0xbb, 0xc4, 0x6e, 0x3d, 0x96, 0x15, 0xcd, 0xc7, 0xf0, 0x76, 0x2c,
	0xf6, 0x32, 0x74, 0x31, 0x5a, 0xcc, 0xea, 0xa5, 0xd8, 0x15, 0x17, 0x24, 0x97, 0xf4, 0xe6, 0x73,
	0x88, 0xba, 0x19, 0x8b, 0xa2, 0x94, 0x9a, 0x09, 0xf8, 0xe7, 0x4c, 0x8c, 0xec, 0xb0, 0x7f, 0x01,
	0x58, 0x4a, 0x86, 0xad, 0x9b, 0xbc, 0x0a, 0x4c, 0xbc, 0x9e, 0xdc, 0x6a, 0x3d, 0x76, 0xf6, 0xb8,
	0xd5, 0x1d, 0xe1, 0xd2, 0x7f, 0xee, 0x77, 0xfd, 0x25, 0x85, 0xcc, 0x97, 0x64, 0xef, 0xba, 0x78,
	0x8d, 0xbb, 0xc6, 0x87, 0xdf, 0xe6, 0x35, 0xf0, 0x7d, 0x5e, 0x03, 0x3f, 0xe6, 0x35, 0xf0, 0xf5,
	0x67, 0xed, 0xc6, 0xbb, 0x27, 0x1e, 0x0b, 0x47, 0x51, 0xdf, 0x1a, 0xf0, 0x89, 0xfd, 0x36, 0x9a,
	0xb0, 0x53, 0xfe, 0xd2, 0xf9, 0xe8, 0x30, 0x66, 0xaf, 0xf1, 0x6d, 0x8f, 0x8f, 0x1d, 0xdf, 0xb3,
	0xd5, 0x97, 0xf7, 0xa3, 0xa1, 0x9d, 0xaa, 0xd7, 0x2f, 0x2a, 0xeb, 0xc3, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xde, 0x16, 0x44, 0xc9, 0x5b, 0x04, 0x00, 0x00,
}

func (m *RegisterSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.References[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SchemaType) > 0 {
		i -= len(m.SchemaType)
		copy(dAtA[i:], m.SchemaType)
		i = encodeVarintDto(dAtA, i, uint64(len(m.SchemaType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchemaVersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaVersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaVersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SubjectVersion != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.SubjectVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchemaId != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubjectVersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectVersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectVersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistrySchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrySchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrySchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.References) > 0 {
		for iNdEx := len(m.References) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.References[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SchemaType) > 0 {
		i -= len(m.SchemaType)
		copy(dAtA[i:], m.SchemaType)
		i = encodeVarintDto(dAtA, i, uint64(len(m.SchemaType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintDto(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintDto(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDto(dAtA []byte, offset int, v uint64) int {
	offset -= sovDto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	l = len(m.SchemaType)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if len(m.References) > 0 {
		for _, e := range m.References {
			l = e.Size()
			n += 1 + l + sovDto(uint64(l))
		}
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistryReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDto(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDto(uint64(m.Id))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDto(uint64(m.Version))
	}
	if m.IsRegistered {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SchemaVersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaId != 0 {
		n += 1 + sovDto(uint64(m.SchemaId))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.SubjectVersion != 0 {
		n += 1 + sovDto(uint64(m.SubjectVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubjectVersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDto(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistrySchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDto(uint64(m.Version))
	}
	if m.Id != 0 {
		n += 1 + sovDto(uint64(m.Id))
	}
	l = len(m.SchemaType)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovDto(uint64(l))
	}
	if len(m.References) > 0 {
		for _, e := range m.References {
			l = e.Size()
			n += 1 + l + sovDto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDto(x uint64) (n int) {
	return sovDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, &RegistryReference{})
			if err := m.References[len(m.References)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaVersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaVersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaVersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectVersion", wireType)
			}
			m.SubjectVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubjectVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectVersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectVersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectVersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrySchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrySchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrySchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, &RegistryReference{})
			if err := m.References[len(m.References)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDto = fmt.Errorf("proto: unexpected end of group")
)
