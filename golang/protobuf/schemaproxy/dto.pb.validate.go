// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schemaproxy/dto.proto

package schemaproxy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dto_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterSchemaRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Schema

	if !_RegisterSchemaRequest_SchemaType_Pattern.MatchString(m.GetSchemaType()) {
		return RegisterSchemaRequestValidationError{
			field:  "SchemaType",
			reason: "value does not match regex pattern \"^(AVRO|JSON|PROTOBUF)$\"",
		}
	}

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterSchemaRequestValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subject

	return nil
}

// RegisterSchemaRequestValidationError is the validation error returned by
// RegisterSchemaRequest.Validate if the designated constraints aren't met.
type RegisterSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterSchemaRequestValidationError) ErrorName() string {
	return "RegisterSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterSchemaRequestValidationError{}

var _RegisterSchemaRequest_SchemaType_Pattern = regexp.MustCompile("^(AVRO|JSON|PROTOBUF)$")

// Validate checks the field values on RegistryReference with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegistryReference) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return RegistryReferenceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Subject

	// no validation rules for Version

	return nil
}

// RegistryReferenceValidationError is the validation error returned by
// RegistryReference.Validate if the designated constraints aren't met.
type RegistryReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryReferenceValidationError) ErrorName() string {
	return "RegistryReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryReferenceValidationError{}

// Validate checks the field values on RegistryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegistryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Subject

	// no validation rules for Version

	// no validation rules for IsRegistered

	return nil
}

// RegistryResponseValidationError is the validation error returned by
// RegistryResponse.Validate if the designated constraints aren't met.
type RegistryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryResponseValidationError) ErrorName() string { return "RegistryResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegistryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryResponseValidationError{}

// Validate checks the field values on SchemaVersionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SchemaVersionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaId

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		return SchemaVersionInfoValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for SubjectVersion

	return nil
}

// SchemaVersionInfoValidationError is the validation error returned by
// SchemaVersionInfo.Validate if the designated constraints aren't met.
type SchemaVersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaVersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaVersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaVersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaVersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaVersionInfoValidationError) ErrorName() string {
	return "SchemaVersionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaVersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaVersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaVersionInfoValidationError{}

// Validate checks the field values on SubjectVersionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubjectVersionInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Subject

	// no validation rules for Version

	return nil
}

// SubjectVersionInfoValidationError is the validation error returned by
// SubjectVersionInfo.Validate if the designated constraints aren't met.
type SubjectVersionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectVersionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectVersionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectVersionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectVersionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectVersionInfoValidationError) ErrorName() string {
	return "SubjectVersionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectVersionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectVersionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectVersionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectVersionInfoValidationError{}

// Validate checks the field values on RegistrySchema with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegistrySchema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Subject

	// no validation rules for Version

	// no validation rules for Id

	// no validation rules for SchemaType

	// no validation rules for Schema

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegistrySchemaValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RegistrySchemaValidationError is the validation error returned by
// RegistrySchema.Validate if the designated constraints aren't met.
type RegistrySchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrySchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrySchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrySchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrySchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrySchemaValidationError) ErrorName() string { return "RegistrySchemaValidationError" }

// Error satisfies the builtin error interface
func (e RegistrySchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrySchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrySchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrySchemaValidationError{}
